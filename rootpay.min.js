!function(e,n){"object"==typeof exports&&"object"==typeof module?module.exports=n():"function"==typeof define&&define.amd?define([],n):"object"==typeof exports?exports.RootPay=n():e.RootPay=n()}(this,(()=>(()=>{var __webpack_modules__={"./root-pay.js":module=>{eval("(function (window) {\n  'use strict';\n\n  // ===================================================\n  // CONFIG & STATE\n  // ===================================================\n  const RootPay = {};\n\n  // Configuration state\n  let config = {\n    token: null,\n    apiBaseUrl: 'https://api.root.credit',\n    debug: false,\n    fields: {},\n    formState: {\n      isValid: false,\n      isFocused: false,\n      isEmpty: true,\n      fields: {}\n    },\n    payee_id: null,\n    callbacks: {}\n  };\n\n  // Active API requests registry\n  const activeRequests = {};\n\n  // ===================================================\n  // LOGGING UTILITIES\n  // ===================================================\n\n  const logger = {\n    log: function () {\n      if (config.debug) console.log(...arguments);\n    },\n    error: function () {\n      if (config.debug) console.error(...arguments);\n    },\n    warn: function () {\n      if (config.debug) console.warn(...arguments);\n    }\n  };\n\n  // ===================================================\n  // INITIALIZATION\n  // ===================================================\n\n  /**\n   * Initialize the RootPay library\n   */\n  RootPay.init = function (options) {\n    // Validate required options\n    if (!options?.token) {\n      throw new Error('RootPay: token is required');\n    }\n    if (!options?.payee_id) {\n      throw new Error('RootPay: payee_id is required');\n    }\n\n    // Set configuration\n    config.token = options.token;\n    config.payee_id = options.payee_id;\n    config.debug = !!options.debug;\n    logger.log(`[RootPay] Initializing with API base URL: ${config.apiBaseUrl}`);\n\n    // Set up message handler for secure iframe communication\n    setupGlobalMessageHandler();\n\n    // Set callbacks\n    config.callbacks.onSuccess = options.onSuccess || function () {};\n    config.callbacks.onError = options.onError || function () {};\n\n    // Create and return the instance\n    return createInstanceAPI();\n  };\n\n  // ===================================================\n  // IFRAME MESSAGE HANDLING\n  // ===================================================\n\n  /**\n   * Sets up the global message listener for iframe communications\n   */\n  function setupGlobalMessageHandler() {\n    window.addEventListener('message', function (event) {\n      const message = event.data;\n\n      // Ignore non-object messages\n      if (!message || typeof message !== 'object') return;\n      logger.log(`[RootPay] Received message:`, message);\n\n      // Handle different message types\n      if (message.requestId) {\n        handleApiResponse(message);\n      } else if (message.type === 'FIELD_STATE_CHANGE' && message.fieldId) {\n        handleFieldStateChange(message);\n      } else if (message.type === 'IFRAME_READY' && message.fieldId) {\n        handleIframeReady(message);\n      }\n    });\n    logger.log('[RootPay] Global message handler set up');\n  }\n\n  /**\n   * Handle API response messages from iframe\n   */\n  function handleApiResponse(message) {\n    logger.log(`[RootPay] Processing API response: ${message.requestId}`);\n    if (!activeRequests[message.requestId]) {\n      logger.warn(`[RootPay] Received response for unknown request: ${message.requestId}`);\n      return;\n    }\n    const request = activeRequests[message.requestId];\n\n    // Clear timeout and delete request\n    clearTimeout(request.timeoutId);\n    delete activeRequests[message.requestId];\n    if (message.success) {\n      logger.log(`[RootPay] Request ${message.requestId} succeeded`);\n      request.callback(201, message.data);\n      config.callbacks.onSuccess(message.data);\n    } else {\n      const errorMessage = message.error || 'Unknown error';\n      const statusCode = message.status || 400;\n      const errorResponse = {\n        error: errorMessage,\n        details: message.errorDetails || null,\n        status: statusCode\n      };\n      logger.error('[RootPay] Error details:', errorResponse);\n      request.callback(statusCode, errorResponse);\n      config.callbacks.onError(errorMessage, errorResponse);\n    }\n  }\n\n  /**\n   * Handle field state change messages from iframe\n   */\n  function handleFieldStateChange(message) {\n    const fieldId = message.fieldId;\n    if (!config.fields[fieldId]) return;\n    logger.log(`[RootPay] Updating field state for ${fieldId}`);\n    const field = config.fields[fieldId];\n    const wasValid = field.state.isValid;\n\n    // Update field state\n    Object.assign(field.state, message.state);\n\n    // Update value if provided\n    if (message.state.value !== undefined) {\n      field.state.value = message.state.value;\n      logger.log(`[RootPay] Field ${fieldId} value: ${message.state.value}`);\n    }\n\n    // Update form state with field type as key\n    const fieldName = message.fieldType || field.config.name;\n    config.formState.fields[fieldName] = field.state;\n\n    // Update overall form validity\n    updateFormValidity();\n\n    // Call validation change callback if needed\n    if (field.config.onValidChange && typeof field.config.onValidChange === 'function' && wasValid !== field.state.isValid) {\n      logger.log(`[RootPay] Field validation changed: ${wasValid} â†’ ${field.state.isValid}`);\n      field.config.onValidChange(field.state.isValid);\n    }\n  }\n\n  /**\n   * Handle iframe ready messages\n   */\n  function handleIframeReady(message) {\n    const fieldId = message.fieldId;\n    if (!config.fields[fieldId]) return;\n    logger.log(`[RootPay] Field ${fieldId} iframe is ready`);\n    config.fields[fieldId].isReady = true;\n\n    // Apply pending configuration\n    const fieldConfig = config.fields[fieldId].config;\n    if (fieldConfig.style && Object.keys(fieldConfig.style).length > 0) {\n      updateField(fieldId, {\n        style: fieldConfig.style\n      });\n    }\n    if (fieldConfig.placeholder) {\n      updateField(fieldId, {\n        placeholder: fieldConfig.placeholder\n      });\n    }\n  }\n\n  // ===================================================\n  // FIELD MANAGEMENT\n  // ===================================================\n\n  /**\n   * Update field configuration\n   */\n  function updateField(fieldId, options) {\n    const field = config.fields[fieldId];\n    if (!field || !field.iframe) return false;\n\n    // Update field configuration\n    if (options.style) {\n      field.config.style = {\n        ...field.config.style,\n        ...options.style\n      };\n    }\n    if (options.placeholder !== undefined) {\n      field.config.placeholder = options.placeholder;\n    }\n\n    // Send update to iframe\n    field.iframe.contentWindow.postMessage({\n      action: 'UPDATE_FIELD',\n      fieldId: fieldId,\n      config: {\n        style: field.config.style,\n        placeholder: field.config.placeholder\n      }\n    }, '*');\n    return true;\n  }\n\n  /**\n   * Create a field for collecting payment information\n   */\n  function createField(selector, options) {\n    // Get container element\n    const container = document.querySelector(selector);\n    if (!container) {\n      throw new Error(`RootPay: Container element not found: ${selector}`);\n    }\n\n    // Create field ID and setup configuration\n    const fieldId = `secure-field-${generateId()}`;\n    const fieldConfig = {\n      type: 'text',\n      name: fieldId,\n      placeholder: '',\n      style: {},\n      onValidChange: null,\n      ...options\n    };\n\n    // Use field type as name if available\n    if (options.type) {\n      fieldConfig.name = options.type;\n    }\n\n    // Create field state\n    const fieldState = {\n      id: fieldId,\n      name: fieldConfig.name,\n      type: fieldConfig.type,\n      isValid: false,\n      isEmpty: true,\n      isFocused: false,\n      errors: [],\n      value: ''\n    };\n\n    // Store field in configuration\n    config.fields[fieldId] = {\n      config: fieldConfig,\n      element: container,\n      iframe: null,\n      state: fieldState,\n      isReady: false\n    };\n\n    // Update form state\n    const formFieldKey = fieldConfig.type || fieldConfig.name;\n    config.formState.fields[formFieldKey] = fieldState;\n    updateFormValidity();\n\n    // Create iframe for the field\n    createFieldIframe(container, fieldId, fieldConfig);\n\n    // Return field controller\n    return {\n      id: fieldId,\n      update: newOptions => updateField(fieldId, newOptions)\n    };\n  }\n\n  /**\n   * Create an iframe for a secure field\n   */\n  function createFieldIframe(container, fieldId, fieldConfig) {\n    // Create iframe element\n    const iframe = document.createElement('iframe');\n    iframe.id = fieldId;\n    iframe.name = fieldId;\n    iframe.setAttribute('frameborder', '0');\n    iframe.setAttribute('scrolling', 'no');\n    iframe.setAttribute('allowtransparency', 'true');\n\n    // Set iframe styling\n    iframe.style.width = '100%';\n    iframe.style.height = '100%';\n    iframe.style.border = 'none';\n    iframe.style.outline = 'none';\n    iframe.style.overflow = 'hidden';\n    iframe.style.backgroundColor = 'transparent';\n\n    // Build iframe source URL\n    let iframeSrc = `${config.apiBaseUrl}/collect/secure-field?field_id=${encodeURIComponent(fieldId)}&field_type=${encodeURIComponent(fieldConfig.type)}`;\n\n    // Add placeholder if provided\n    if (fieldConfig.placeholder) {\n      iframeSrc += `&placeholder=${encodeURIComponent(fieldConfig.placeholder)}`;\n    }\n\n    // Add styling parameters\n    iframeSrc += `&show_label=false`;\n    iframeSrc += `&input_border=none`;\n    iframeSrc += `&input_border_radius=0px`;\n    iframeSrc += `&input_padding=0 12px`;\n    iframeSrc += `&font_size=16px`;\n    iframeSrc += `&input_background=transparent`;\n    iframeSrc += `&input_color=#333`;\n    iframeSrc += `&font_family=Arial, sans-serif`;\n    iframe.setAttribute('src', iframeSrc);\n\n    // Store iframe reference and append to container\n    config.fields[fieldId].iframe = iframe;\n    container.appendChild(iframe);\n  }\n\n  // ===================================================\n  // PAYMENT METHOD SUBMISSION\n  // ===================================================\n\n  /**\n   * Submit payment method information\n   */\n  function submitPaymentMethod(callback) {\n    let type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'card';\n    logger.log('[RootPay] Submitting payment method:', type);\n\n    // Check if fields exist\n    if (Object.keys(config.fields).length === 0) {\n      callback(400, {\n        error: 'No fields configured'\n      });\n      return;\n    }\n\n    // Refresh all field values before submission\n    refreshFieldValues(() => {\n      processSubmission(callback, type);\n    });\n  }\n\n  /**\n   * Request updated values from all fields\n   */\n  function refreshFieldValues(onComplete) {\n    const iframes = Object.values(config.fields).map(field => field.iframe).filter(Boolean);\n\n    // If no iframes, proceed directly\n    if (iframes.length === 0) {\n      onComplete();\n      return;\n    }\n    let pendingRefreshes = iframes.length;\n\n    // Create one-time listener for field updates\n    const fieldUpdateListener = function (event) {\n      const message = event.data;\n      if (message?.type === 'FIELD_STATE_CHANGE') {\n        pendingRefreshes--;\n        if (pendingRefreshes <= 0) {\n          window.removeEventListener('message', fieldUpdateListener);\n          onComplete();\n        }\n      }\n    };\n\n    // Set up listener and request values\n    window.addEventListener('message', fieldUpdateListener);\n    iframes.forEach(iframe => {\n      try {\n        iframe.contentWindow.postMessage({\n          action: 'GET_FIELD_VALUE',\n          fieldId: iframe.id\n        }, '*');\n      } catch (e) {\n        logger.error('[RootPay] Error requesting field value:', e);\n        pendingRefreshes--;\n      }\n    });\n\n    // Set timeout in case some fields don't respond\n    setTimeout(() => {\n      if (pendingRefreshes > 0) {\n        window.removeEventListener('message', fieldUpdateListener);\n        onComplete();\n      }\n    }, 1000);\n  }\n\n  /**\n   * Process payment method submission\n   */\n  function processSubmission(callback, type) {\n    const fields = config.formState.fields;\n\n    // Validate field values based on payment type\n    let requestData, endpoint;\n    if (type === 'card') {\n      // Get card field values\n      const cardNumber = fields['card-number']?.value;\n      let cardExpiry = fields['card-expiry']?.value;\n      if (!cardNumber || !cardExpiry) {\n        callback(400, {\n          error: 'Card number and expiry are required'\n        });\n        return;\n      }\n\n      // Prepare card submission data\n      requestData = {\n        card_number: cardNumber,\n        card_expiry_date: cardExpiry.replace('/', '') // Remove slash from MM/YY\n      };\n      endpoint = `/api/payees/${config.payee_id}/payment-methods/push-to-card`;\n    } else if (type === 'bank') {\n      // Get bank field values\n      const accountNumber = fields['account-number']?.value;\n      const routingNumber = fields['routing-number']?.value;\n      if (!accountNumber || !routingNumber) {\n        callback(400, {\n          error: 'Account number and routing number are required'\n        });\n        return;\n      }\n\n      // Prepare bank submission data\n      requestData = {\n        account_number: accountNumber,\n        routing_number: routingNumber,\n        routing_number_type: 'aba'\n      };\n      endpoint = `/api/payees/${config.payee_id}/payment-methods/pay-to-bank`;\n    } else {\n      callback(400, {\n        error: 'Invalid payment method type'\n      });\n      return;\n    }\n\n    // Send request via iframe\n    sendIframeRequest(endpoint, requestData, callback);\n  }\n\n  // ===================================================\n  // API REQUEST HANDLING\n  // ===================================================\n\n  /**\n   * Send API request via iframe\n   */\n  function sendIframeRequest(endpoint, data, callback) {\n    const requestId = `request-${generateId()}`;\n\n    // Get first available iframe\n    const iframes = Object.values(config.fields).map(field => field.iframe).filter(Boolean);\n    if (iframes.length === 0) {\n      callback(400, {\n        error: 'No secure fields found'\n      });\n      return;\n    }\n\n    // Prepare message\n    const message = {\n      action: 'API_REQUEST',\n      endpoint,\n      data,\n      token: config.token,\n      requestId,\n      payee_id: config.payee_id,\n      timestamp: Date.now()\n    };\n\n    // Set up timeout for request\n    const timeoutId = setTimeout(() => {\n      if (activeRequests[requestId]) {\n        delete activeRequests[requestId];\n        callback(408, {\n          error: 'Request timed out'\n        });\n      }\n    }, 15000);\n\n    // Register request\n    activeRequests[requestId] = {\n      callback,\n      timeoutId,\n      sentAt: new Date()\n    };\n    try {\n      if (!iframes[0].contentWindow) {\n        throw new Error('Iframe contentWindow is not available');\n      }\n\n      // Send request via iframe\n      iframes[0].contentWindow.postMessage(message, '*');\n    } catch (error) {\n      clearTimeout(timeoutId);\n      delete activeRequests[requestId];\n      callback(500, {\n        error: 'Failed to send request: ' + error.message\n      });\n    }\n  }\n\n  // ===================================================\n  // UTILITY FUNCTIONS\n  // ===================================================\n\n  /**\n   * Generate a unique ID\n   */\n  function generateId() {\n    return Math.random().toString(36).substring(2, 15);\n  }\n\n  /**\n   * Update form validity state\n   */\n  function updateFormValidity() {\n    let isValid = true;\n    let isEmpty = true;\n    Object.values(config.formState.fields).forEach(field => {\n      if (!field.isValid) isValid = false;\n      if (!field.isEmpty) isEmpty = false;\n    });\n    config.formState.isValid = isValid;\n    config.formState.isEmpty = isEmpty;\n  }\n\n  /**\n   * Create the public API instance\n   */\n  function createInstanceAPI() {\n    return {\n      field: createField,\n      submitPaymentMethod,\n      getFormState: () => JSON.parse(JSON.stringify(config.formState))\n    };\n  }\n\n  // ===================================================\n  // EXPORTS\n  // ===================================================\n\n  // Expose the RootPay object globally\n  window.RootPay = RootPay;\n\n  // Export for webpack/module usage\n  if ( true && module.exports) {\n    module.exports = RootPay;\n  }\n})(window);\n\n//# sourceURL=webpack://RootPay/./root-pay.js?")}},__webpack_module_cache__={};function __webpack_require__(e){var n=__webpack_module_cache__[e];if(void 0!==n)return n.exports;var t=__webpack_module_cache__[e]={exports:{}};return __webpack_modules__[e](t,t.exports,__webpack_require__),t.exports}var __webpack_exports__=__webpack_require__("./root-pay.js");return __webpack_exports__})()));