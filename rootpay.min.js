!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports.RootPay=t():e.RootPay=t()}(this,(()=>{return e={316:e=>{!function(t){"use strict";const n={};let o={token:null,apiBaseUrl:"https://api.useroot.com",debug:!1,fields:{},formState:{isValid:!1,isFocused:!1,isEmpty:!0,fields:{}},payee_id:null,callbacks:{},paymentMethods:[],confirmationFields:{}};const i={},a=function(){o.debug},r=function(){o.debug},s=function(){o.debug};function d(e,t){const n=o.fields[e];return!(!n||!n.iframe||(t.style&&(n.config.style={...n.config.style,...t.style}),void 0!==t.placeholder&&(n.config.placeholder=t.placeholder),n.iframe.contentWindow.postMessage({action:"UPDATE_FIELD",fieldId:e,config:{style:n.config.style,placeholder:n.config.placeholder}},"*"),0))}function l(e,t){const n=document.querySelector(e);if(!n)throw new Error(`RootPay: Container element not found: ${e}`);const i=`secure-field-${y()}`,r={type:"text",name:i,placeholder:"",style:{},onValidChange:null,...t};t.type&&(r.name=t.type),c(r.type)&&function(e,t){const n=function(e){switch(e){case"confirm-card-number":return"card-number";case"confirm-account-number":return"account-number";default:return null}}(t);n&&(o.confirmationFields[n]||(o.confirmationFields[n]=[]),o.confirmationFields[n].push(e),a(`[RootPay] Setup confirmation field ${e} for ${n}`))}(i,r.type);const s={id:i,name:r.name,type:r.type,isValid:!1,isEmpty:!0,isFocused:!1,errors:[]};o.fields[i]={config:r,element:n,iframe:null,state:s,isReady:!1};const l=r.type||r.name;return o.formState.fields[l]=s,g(),function(e,t,n){const i=document.createElement("iframe");i.id=t,i.name=t,i.setAttribute("frameborder","0"),i.setAttribute("scrolling","no"),i.setAttribute("allowtransparency","true"),i.style.width="100%",i.style.height="100%",i.style.border="none",i.style.outline="none",i.style.overflow="hidden",i.style.backgroundColor="transparent";let a=`${o.apiBaseUrl}/collect/secure-field?field_id=${encodeURIComponent(t)}&field_type=${encodeURIComponent(n.type)}`;n.placeholder&&(a+=`&placeholder=${encodeURIComponent(n.placeholder)}`),a+="&show_label=false",a+="&input_border=none",a+="&input_border_radius=0px",a+="&input_padding=0 12px",a+="&font_size=16px",a+="&input_background=transparent",a+="&input_color=#333",a+="&font_family=Arial, sans-serif",i.setAttribute("src",a),o.fields[t].iframe=i,e.appendChild(i)}(n,i,r),{id:i,update:e=>d(i,e)}}function c(e){return"confirm-card-number"===e||"confirm-account-number"===e}function f(e){const t=o.confirmationFields[e];if(!t||0===t.length)return;const n=Date.now(),i=`lastValidation_${e}`;if(o[i]&&n-o[i]<50)return void a(`[RootPay] Skipping validation for ${e} - too soon after last validation`);o[i]=n;const r=function(e){for(const[t,n]of Object.entries(o.fields))if(n.config.type===e)return t;return null}(e);r?u([r,...t],(n=>{const i=n[r];if(!o.fields[r]||!i||""===i.trim())return a(`[RootPay] Main field ${e} is empty - marking confirmation fields as invalid`),t.forEach((e=>{const t=o.fields[e];if(!t)return;const n=t.state.isValid;t.state.isValid=!1,t.state.errors=["Main field must be filled first"];const i=t.config.type;o.formState.fields[i]=t.state,t.config.onValidChange&&"function"==typeof t.config.onValidChange&&n!==t.state.isValid&&(a(`[RootPay] Confirmation field validation changed: ${n} → ${t.state.isValid}`),t.config.onValidChange(t.state.isValid))})),void g();t.forEach((e=>{const t=n[e],r=o.fields[e];if(!r)return;const s=r.state.isValid,d=r.state.isEmpty,l=!t||""===t.trim(),c=!l&&t===i;if(s!==c||d!==l){r.state.isEmpty=l,r.state.isValid=c,r.state.errors=l?["Field is required"]:c?[]:["Values do not match"];const e=r.config.type;o.formState.fields[e]=r.state,r.config.onValidChange&&"function"==typeof r.config.onValidChange&&s!==r.state.isValid&&(a(`[RootPay] Confirmation field validation changed: ${s} → ${r.state.isValid}`),r.config.onValidChange(r.state.isValid))}else a(`[RootPay] No state change for confirmation field ${e}`)})),g()}),"validation"):s(`[RootPay] Main field not found for type: ${e}`)}function u(e,t){let n,i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"submission";if(n=Array.isArray(e)?e.map((e=>[e,o.fields[e]])).filter((e=>{let[t,n]=e;return n&&n.iframe})):Object.entries(e).filter((e=>{let[t,n]=e;return n.iframe})),0===n.length)return void t({});const a={};let s=n.length;const d="validation"===i?"pendingValidationCallback":"pendingValueCallback";n.forEach((e=>{let[n,o]=e;o[d]=e=>{if("validation"===i)a[n]=e;else{const t=o.config.type||o.config.name;a[t]=e}s--,s<=0&&(t(a),Object.keys(a).forEach((e=>delete a[e])))}})),n.forEach((e=>{let[n,o]=e;try{o.iframe.contentWindow.postMessage({action:"GET_FIELD_VALUE",fieldId:n},"*")}catch(e){r(`[RootPay] Error requesting field value for ${i}:`,e),delete o[d],s--,s<=0&&(t(a),Object.keys(a).forEach((e=>delete a[e])))}})),setTimeout((()=>{s>0&&(n.forEach((e=>{let[t,n]=e;n[d]&&delete n[d]})),t(a),Object.keys(a).forEach((e=>delete a[e])))}),1e3)}function p(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"card",n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};var i;void 0===n.isDefault&&(n.isDefault=!0),a("[RootPay] Submitting payment method:",t,n),0!==Object.keys(o.fields).length?(i=i=>{!function(e,t){let n,i,a=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{};if("card"===t){const t=r["card-number"];let s=r["card-expiry"];if(!t||!s)return void e(400,{error:"Card number and expiry are required"});n={card_number:t,card_expiry_date:s},i=`/api/payees/${o.payee_id}/payment-methods/push-to-card?is_default=${!!a.isDefault}`}else{if("bank"!==t)return void e(400,{error:"Invalid payment method type"});{const t=r["account-number"],s=r["routing-number"];if(!t||!s)return void e(400,{error:"Account number and routing number are required"});n={account_number:t,routing_number:s,routing_number_type:"aba"},i=`/api/payees/${o.payee_id}/payment-methods/pay-to-bank?is_default=${!!a.isDefault}`}}m(i,n,e)}(e,t,n,i)},u(o.fields,i,"submission")):e(400,{error:"No fields configured"})}function m(e,t,n){const a=`request-${y()}`,r=Object.values(o.fields).map((e=>e.iframe)).filter(Boolean);if(0===r.length)return void n(400,{error:"No secure fields found"});const s={action:"API_REQUEST",endpoint:e,data:t,token:o.token,requestId:a,payee_id:o.payee_id,timestamp:Date.now()},d=setTimeout((()=>{i[a]&&(delete i[a],n(408,{error:"Request timed out"}))}),15e3);i[a]={callback:n,timeoutId:d,sentAt:new Date};try{if(!r[0].contentWindow)throw new Error("Iframe contentWindow is not available");r[0].contentWindow.postMessage(s,"*")}catch(e){clearTimeout(d),delete i[a],n(500,{error:"Failed to send request: "+e.message})}}function y(){return Math.random().toString(36).substring(2,15)}function g(){let e=!0,t=!0;Object.values(o.formState.fields).forEach((n=>{n.isValid||(e=!1),n.isEmpty||(t=!1)})),o.formState.isValid=e,o.formState.isEmpty=t}function h(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(!e||"function"!=typeof e)return JSON.parse(JSON.stringify(o.paymentMethods));a("[RootPay] Fetching payment methods");let n="";return t.cursor&&(n+=(n?"&":"?")+`cursor=${encodeURIComponent(t.cursor)}`),m(`/api/payees/${o.payee_id}/payment-methods${n}`,{},((t,n)=>{if(201===t||200===t){const t={hasMore:null!==n.next_cursor&&void 0!==n.next_cursor,nextCursor:n.next_cursor||null};e(null,o.paymentMethods,t)}else e(n.error||"Failed to fetch payment methods",null)})),JSON.parse(JSON.stringify(o.paymentMethods))}n.init=function(e){if(!e?.token)throw new Error("RootPay: token is required");if(!e?.payee_id)throw new Error("RootPay: payee_id is required");return o.token=e.token,o.payee_id=e.payee_id,o.debug=!!e.debug,a(`[RootPay] Initializing with API base URL: ${o.apiBaseUrl}`),t.addEventListener("message",(function(e){const t=e.data;t&&"object"==typeof t&&(t.requestId?function(e){if(a(`[RootPay] Processing API response: ${e.requestId}`),!i[e.requestId])return void s(`[RootPay] Received response for unknown request: ${e.requestId}`);const t=i[e.requestId];if(clearTimeout(t.timeoutId),delete i[e.requestId],e.success)a(`[RootPay] Request ${e.requestId} succeeded`),t.callback(201,e.data),o.callbacks.onSuccess(e.data);else{const n=e.error||"Unknown error",i=e.status||400,a={error:n,details:e.errorDetails||null,status:i};r("[RootPay] Error details:",a),t.callback(i,a),o.callbacks.onError(n,a)}}(t):"FIELD_STATE_CHANGE"===t.type&&t.fieldId?function(e){const t=e.fieldId;if(!o.fields[t])return;a(`[RootPay] Updating field state for ${t}`);const n=o.fields[t],i=n.state.isValid;Object.assign(n.state,e.state);const r=e.fieldType||n.config.name;o.formState.fields[r]=n.state,g();const s=n.config.type,d=c(s)||!e.state.isFocused&&!n.state.isEmpty||i!==n.state.isValid;if(d){const e=25;"card-number"!==s&&"account-number"!==s||setTimeout((()=>f(s)),e),"confirm-card-number"===s?setTimeout((()=>f("card-number")),e):"confirm-account-number"===s&&setTimeout((()=>f("account-number")),e)}n.config.onValidChange&&"function"==typeof n.config.onValidChange&&i!==n.state.isValid&&(a(`[RootPay] Field validation changed: ${i} → ${n.state.isValid}`),n.config.onValidChange(n.state.isValid))}(t):"FIELD_VALUE_RESPONSE"===t.type&&t.fieldId?function(e){const t=e.fieldId;if(!o.fields[t])return;a(`[RootPay] Received field value for ${t}`);const n=o.fields[t];n.pendingValueCallback&&(n.pendingValueCallback(e.value),delete n.pendingValueCallback),n.pendingValidationCallback&&(n.pendingValidationCallback(e.value),delete n.pendingValidationCallback)}(t):"IFRAME_READY"===t.type&&t.fieldId?function(e){const t=e.fieldId;if(!o.fields[t])return;a(`[RootPay] Field ${t} iframe is ready`),o.fields[t].isReady=!0;const n=o.fields[t].config;n.style&&Object.keys(n.style).length>0&&d(t,{style:n.style}),n.placeholder&&d(t,{placeholder:n.placeholder})}(t):"PAYMENT_METHODS_UPDATE"===t.type&&function(e){const t=e.paymentMethods;if(!t)return void s("[RootPay] Received invalid payment methods update: missing data");let n;if(Array.isArray(t))n=t;else{if(!t.data||!Array.isArray(t.data))return void s("[RootPay] Received invalid payment methods update: not an array");n=t.data}a("[RootPay] Updating payment methods",n),o.paymentMethods=n,o.callbacks.onPaymentMethodsUpdate&&o.callbacks.onPaymentMethodsUpdate(n)}(t))})),a("[RootPay] Global message handler set up"),o.callbacks.onSuccess=e.onSuccess||function(){},o.callbacks.onError=e.onError||function(){},o.callbacks.onPaymentMethodsUpdate=e.onPaymentMethodsUpdate||function(){},{field:l,submitPaymentMethod:p,getFormState:()=>JSON.parse(JSON.stringify(o.formState)),getPaymentMethods:h}},t.RootPay=n,e.exports&&(e.exports=n)}(window)}},t={},function n(o){var i=t[o];if(void 0!==i)return i.exports;var a=t[o]={exports:{}};return e[o](a,a.exports,n),a.exports}(316);var e,t}));